function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-Dec-2020 08:55:38.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [5;0;0;2.2];
x1_step1.gain = [0.5;0.72463768115942;0.503778337531486;0.36231884057971];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.1148933500831448296;1.0831928801580033017;-0.13882924847208452657;1.3407822811690783826;2.5345188773674744986;0.50549152177072809167;1.6381595322978603768;-0.33210247086134220273;1.8969936702887681967;4.5636800748000023731];
IW1_1 = [-0.69725545963466362132 0.68133534863984512864 0.88582685167441244101 -0.50078640355802606088;0.80464338425121773035 -0.4500502068882920037 -0.7271294224762010483 0.32491003670249080093;1.8243408235249551907 0.66534869180817524104 2.4473560645036473993 -1.0077162260945760064;-0.042798908869531783472 0.30857845141993223148 2.3108680625441002654 -0.55567269937047614192;-0.39035160429521598147 -0.91028420785510566482 5.8418812930073675815 -2.4165961501880532936;0.84499835438503911877 -0.30597863693819732367 0.70023895880386799462 -0.12606629462489396531;0.12917722980313883774 0.079109024345218631469 1.9351906685264512742 -0.12678808005937250436;-0.71613451658292315294 0.59475011959907242431 -1.0581127414482767168 0.090954391886624588737;0.4253358386031299565 -0.24419146393718671462 1.4744971139687945705 0.4284076015134167803;1.5334825129102600538 -0.64936825768310391105 9.8161674129706089076 0.61651588110376609464];

% Layer 2
b2 = [0.093437627292658378964;0.80948917813091436635];
LW2_1 = [-2.6551665960814854195 -3.6037501455802063433 -0.23917993054432112876 -4.430970488330454593 -0.55329200999882921508 4.5899444268961016036 10.116816980754970601 3.0164561298268774969 -6.4023768655645900694 0.12216559015333687543;-1.9194133613493844503 -2.5391448564828920098 -0.048299763085281152697 -1.1276978197269573734 -1.37060718982595664 4.626496824684283915 3.5701489589553463411 3.9436409159357626031 -2.7922889246282616149 0.021453797041829411607];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2.52844500632111;16.0513643659711];
y1_step1.xoffset = [0;0.0104];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
